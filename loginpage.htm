<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sheeka App</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Custom styles for gradients and animations */
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            overflow: hidden; /* Prevent scroll during splash */
        }

        .gradient-background {
            background: linear-gradient(to top left, #ffffff, #ffffff1a);
        }

        .fade-in {
            animation: fadeIn 1s ease-out forwards;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .slide-up {
            animation: slideUp 1s ease-out forwards;
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Specific animation delays for splash screen elements */
        .splash-image {
            animation: fadeIn 1s ease-out forwards, slideUp 1s ease-out forwards;
            animation-delay: 0s, 0s;
        }

        .splash-text {
            animation: fadeIn 1s ease-out forwards, slideUp 1s ease-out forwards;
            animation-delay: 0.3s, 0.3s;
        }

        .splash-spinner {
            animation: fadeIn 1s ease-out forwards;
            animation-delay: 0.6s;
        }

        /* Custom spinner for better visibility */
        .custom-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #fff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Message box styling */
        .message-box {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #ef4444; /* Red-500 */
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
        .message-box.show {
            opacity: 1;
        }
    </style>
</head>
<body class="h-screen w-screen flex items-center justify-center gradient-background">
    <div id="app-root" class="w-full h-full flex items-center justify-center">
        <!-- Content will be rendered here by JavaScript -->
    </div>

    <!-- Message box element -->
    <div id="message-box" class="message-box hidden"></div>

    <script>
        // Function to show a temporary message (like Flutter's SnackBar)
        function showMessage(message, type = 'error', duration = 5000) {
            const msgBox = document.getElementById('message-box');
            msgBox.textContent = message;
            msgBox.className = 'message-box show'; // Reset classes and show

            if (type === 'error') {
                msgBox.style.backgroundColor = '#ef4444'; // Tailwind red-500
            } else if (type === 'success') {
                msgBox.style.backgroundColor = '#22c55e'; // Tailwind green-500
            } else {
                msgBox.style.backgroundColor = '#3b82f6'; // Tailwind blue-500
            }

            msgBox.classList.remove('hidden');

            setTimeout(() => {
                msgBox.classList.add('hidden');
                msgBox.classList.remove('show');
            }, duration);
        }

        // --- JWT Decoder (Simplified for client-side) ---
        function decodeJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            } catch (e) {
                console.error("Error decoding JWT:", e);
                return null;
            }
        }

        function isTokenExpired(token) {
            if (!token) return true;
            const decoded = decodeJwt(token);
            if (!decoded || !decoded.exp) return true;
            const currentTime = Date.now() / 1000; // in seconds
            return decoded.exp < currentTime;
        }

        // --- Page Rendering Functions ---
        const appRoot = document.getElementById('app-root');

        function renderSplashScreen() {
            appRoot.innerHTML = `
                <div class="flex flex-col items-center justify-center h-full w-full">
                    <img src="https://placehold.co/180x180/000000/FFFFFF?text=Sheeka" alt="Sheeka Logo" class="splash-image rounded-full shadow-lg">
                    <div class="h-8"></div>
                    <h1 class="splash-text text-5xl font-extrabold text-white tracking-wider drop-shadow-lg">Sheeka</h1>
                    <div class="h-10"></div>
                    <div class="splash-spinner custom-spinner"></div>
                </div>
            `;
            document.body.style.overflow = 'hidden'; // Keep overflow hidden during splash
        }

        function renderLoginPage(message = '') {
            document.body.style.overflow = 'auto'; // Allow scrolling on login page
            appRoot.innerHTML = `
                <div class="flex w-full h-full">
                    <!-- Left Section (Image/Placeholder) - Visible on wider screens -->
                    <div class="hidden md:flex flex-1 bg-gray-200 items-center justify-center p-8">
                        <i class="fa-solid fa-bag-shopping text-gray-800 text-9xl"></i>
                    </div>

                    <!-- Right Section (Login Form) -->
                    <div class="flex-1 flex items-center justify-center p-6 md:p-10 lg:p-16">
                        <div class="w-full max-w-md">
                            <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-8">Login</h2>
                            <form id="login-form" class="space-y-6">
                                <div>
                                    <label for="email" class="sr-only">Email</label>
                                    <input type="email" id="email" name="email" placeholder="Email"
                                        class="w-full p-4 rounded-xl bg-gray-900 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-white focus:border-transparent transition duration-200 ease-in-out"
                                        required>
                                </div>
                                <div>
                                    <label for="password" class="sr-only">Password</label>
                                    <input type="password" id="password" name="password" placeholder="Password"
                                        class="w-full p-4 rounded-xl bg-gray-900 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-white focus:border-transparent transition duration-200 ease-in-out"
                                        required>
                                </div>
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <input id="remember-me" name="remember-me" type="checkbox"
                                            class="h-4 w-4 text-gray-900 border-gray-300 rounded focus:ring-gray-900">
                                        <label for="remember-me" class="ml-2 block text-sm text-gray-900">
                                            Remember me
                                        </label>
                                    </div>
                                    <a href="#" class="text-sm font-medium text-gray-900 hover:text-gray-700">
                                        Forgot Password?
                                    </a>
                                </div>
                                <div>
                                    <button type="submit" id="login-button"
                                        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-xl shadow-sm text-lg font-semibold text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition duration-200 ease-in-out">
                                        Login
                                    </button>
                                </div>
                                <div class="text-center">
                                    <a href="#" class="font-medium text-gray-900 hover:text-gray-700">
                                        Don't have an account? Register
                                    </a>
                                </div>
                                ${message ? `<p class="text-red-500 text-center mt-4">${message}</p>` : ''}
                            </form>
                        </div>
                    </div>
                </div>
            `;

            if (message && !message.includes('system is off')) {
                showMessage(message, 'error');
            }

            document.getElementById('login-form').addEventListener('submit', async (event) => {
                event.preventDefault();
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                const rememberMe = document.getElementById('remember-me').checked;

                if (!email || !password) {
                    showMessage('Please fill in both email and password');
                    return;
                }

                const loginButton = document.getElementById('login-button');
                loginButton.disabled = true;
                loginButton.innerHTML = `<i class="fas fa-spinner fa-spin text-white"></i> Loading...`; // Spinner

                try {
                    const response = await fetch('https://sheeka.onrender.com/auth/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, password })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const token = data.token;
                        const role = data.user.role;
                        const userId = data.user.id;
                        const index = data.user.index;

                        localStorage.setItem('token', token);
                        localStorage.setItem('role', role);
                        localStorage.setItem('id', userId);
                        localStorage.setItem('index', index); // Store index as string, parse when retrieved

                        // Redirect to the new admin.html page
                        window.location.href = 'admin.html';

                    } else {
                        const errorData = await response.json();
                        showMessage(errorData.message || 'Login failed', 'error');
                    }
                } catch (error) {
                    console.error('Error connecting to the server:', error);
                    showMessage(`Error connecting to the server: ${error.message || error}`, 'error');
                } finally {
                    loginButton.disabled = false;
                    loginButton.innerHTML = 'Login';
                }
            });
        }

        function renderContactSupportPage(message = 'Your system is off. Please contact support.') {
            document.body.style.overflow = 'auto'; // Allow scrolling
            appRoot.innerHTML = `
                <div class="min-h-screen w-full flex flex-col items-center bg-gradient-to-br from-white to-gray-100 p-6 md:p-10">
                    <div class="w-full max-w-2xl bg-white rounded-2xl shadow-xl p-8 md:p-12 mt-10">
                        <div class="flex flex-col items-center text-center">
                            <i class="fa-solid fa-lock text-red-500 text-8xl mb-8"></i>
                            <h1 class="text-3xl md:text-4xl font-extrabold text-gray-900 mb-4">System Access Restricted</h1>
                            <p class="text-xl font-semibold text-gray-800 mb-6">${message}</p>
                            <p class="text-base text-gray-600 mb-10">
                                We apologize for the inconvenience. Your account access has been restricted.
                                Please reach out to our support team for assistance.
                            </p>

                            <!-- Contact Options -->
                            <div class="w-full space-y-4">
                                ${buildContactOption('Email Support', 'support@sheeka.com', 'email', 'mailto:support@sheeka.com?subject=System Access Issue - Request for Support&body=Dear Support Team,%0A%0AI am writing to report an issue with my account access. My system is currently off. Please assist me in resolving this. %0A%0AThank you.')}
                                ${buildContactOption('Call Support', '+213558904032', 'phone', 'tel:+213558904032')}
                                ${buildContactOption('Visit Support Website', 'www.sheeka.com/support', 'globe', 'https://www.sheeka.com/support')}
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Attach event listeners for contact options
            document.querySelectorAll('.contact-option-card').forEach(card => {
                card.addEventListener('click', () => {
                    const url = card.dataset.url;
                    if (url) {
                        window.open(url, '_blank'); // Open in new tab
                    }
                });
            });
        }

        function buildContactOption(title, subtitle, iconClass, url) {
            let iconHtml = '';
            if (iconClass === 'email') {
                iconHtml = '<i class="fa-solid fa-envelope text-gray-900 text-3xl"></i>';
            } else if (iconClass === 'phone') {
                iconHtml = '<i class="fa-solid fa-phone text-gray-900 text-3xl"></i>';
            } else if (iconClass === 'globe') {
                iconHtml = '<i class="fa-solid fa-globe text-gray-900 text-3xl"></i>';
            }

            return `
                <div class="contact-option-card cursor-pointer bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-200 ease-in-out p-5 flex items-center" data-url="${url}">
                    <div class="flex-shrink-0 mr-5">
                        ${iconHtml}
                    </div>
                    <div class="flex-grow text-left">
                        <h3 class="text-lg font-bold text-gray-900">${title}</h3>
                        <p class="text-sm text-gray-600">${subtitle}</p>
                    </div>
                    <i class="fa-solid fa-chevron-right text-gray-400 text-sm"></i>
                </div>
            `;
        }

        // --- Navigation Logic ---
        function goToLogin(message = '') {
            renderLoginPage(message);
        }

        async function checkLoginStatus() {
            const token = localStorage.getItem('token');
            const userId = localStorage.getItem('id');

            if (token && userId && !isTokenExpired(token)) {
                try {
                    const response = await fetch(`https://sheeka.onrender.com/auth/ausers/${userId}/index`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                    });

                    let fetchedIndex;
                    if (response.ok) {
                        const data = await response.json();
                        fetchedIndex = data.index;
                        localStorage.setItem('index', fetchedIndex);
                    } else {
                        console.warn('Failed to fetch latest index from server. Status:', response.status);
                        const decodedToken = decodeJwt(token);
                        fetchedIndex = decodedToken ? (decodedToken.index || 0) : 0;
                        console.warn('Falling back to index from JWT:', fetchedIndex);
                    }

                    const role = localStorage.getItem('role') || (decodeJwt(token) ? decodeJwt(token).role : null);

                    if (fetchedIndex === 1) {
                        renderContactSupportPage();
                    } else if (fetchedIndex === 0) {
                        // Redirect to admin.html
                        window.location.href = 'admin.html';
                    } else {
                        console.error('Unexpected index value:', fetchedIndex);
                        goToLogin('An unexpected system status was encountered. Please log in again.');
                    }
                } catch (e) {
                    console.error('Error during token decode or index fetch:', e);
                    goToLogin('An error occurred during session validation. Please log in again.');
                }
            } else {
                goToLogin();
            }
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            renderSplashScreen();
            setTimeout(() => {
                checkLoginStatus();
            }, 3000); // Wait for 3 seconds for splash screen animation
        });
    </script>
</body>
</html>
